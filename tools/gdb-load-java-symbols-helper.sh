#!/bin/sh
# Copyright (C) 2014 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This script is invoked by gdb-gdbserver-load-symbols.

# Get executable oat file map sections.
pid=$(cat /tmp/run-test-info-inferiors | grep process | tr -s [:blank:] | cut -d' ' -f4)
if [ "$pid" = "" ] ; then
  # Get pid from shell, in case "info inferiors" doesn't work.
  # This might happen in eclipse which uses GDB/MI interface.
  pid=$(adb shell ps | grep ' t ' | line -n1 | tr -s [:blank:] | cut -d' ' -f2)
fi
map_sections=$(adb shell cat /proc/$pid/maps | tr -d '\r' | grep '/dalvik-cache/' | grep ' r-xp ')

# Get architecture varients.
arch=$(echo "$map_sections" | head -n 1 | awk -F'/dalvik-cache/' '{print $2}' | cut -d'/' -f1)
if [ "$(echo $arch | grep 64)" != "" ] ; then
  arch_suffix=64
else
  arch_suffix=
fi

echo "# This file is automatically generated by 'gdb-load-java-symbols-helper.sh'." \
  > /tmp/run-test-load-symbols

# Settings for core.oat/boot.oat file, assume we have the copy on host.
# TODO: core.oat/boot.oat might contains no symbols.
image_map=$(echo "$map_sections" | grep -E "[core|boot]\.oat")
if [ "$(echo $image_map | grep core.oat)" != "" ] ; then
  image_file=$ANDROID_PRODUCT_OUT/data/art-test/$arch/core.oat
elif [ "$(echo $image_map | grep boot.oat)" != "" ] ; then
  image_file=$ANDROID_PRODUCT_OUT/symbols/system/framework/$arch/boot.oat
fi
if [ "$image_file" != "" ] ; then
  if [ "$(readelf -S $image_file | grep .debug)" != "" ] ; then
    image_address=$(echo $image_map | cut -d'-' -f1)
    # Tell gdb to load symbols for core.oat/boot.oat file.
    echo add-symbol-file $image_file 0x$image_address >> /tmp/run-test-load-symbols
    # Add libcore java source directories.
    core_src=$(find $(find $ANDROID_BUILD_TOP/libcore/ -name java -type d | grep -v test) -type d)
    (echo "$core_src" | xargs -n1 echo directory) >> /tmp/run-test-load-symbols
  else
    echo Warning: No debug symbols found in $image_file!
  fi
fi

# Settings for other oat file.
dex_map=$(echo "$map_sections" | grep "classes.dex" | head -n 1)
if [ "$dex_map" != "" ] ; then
  dex_file=$(echo "$dex_map" | awk '{print $NF}')
  dex_address=$(echo $dex_map | cut -d'-' -f1)
  # Download oat file.
  adb pull $dex_file /tmp/
  # Tell gdb to load symbols from the oat file.
  echo add-symbol-file /tmp/$(basename $dex_file) 0x$dex_address >> /tmp/run-test-load-symbols
  # Get test name.
  test_name=$(echo $dex_file | cut -d@ -f4 | cut -d. -f1)
  # Add to source search directories.
  echo directory $ANDROID_BUILD_TOP/art/test/$test_name/src >> /tmp/run-test-load-symbols
fi
